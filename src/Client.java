/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Arrays;
import java.util.HashMap;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class Client extends javax.swing.JFrame {

    // packet types
    static final int CONNECT = 0;
    static final int SEARCH = 1;
    static final int RESULTS = 2;
    static final int KEY = 3;
    static final int CLIENT = 4;
    static final int INFO = 5;

    // global variables
    Socket s;
    ObjectOutputStream out;
    ObjectInputStream in;
    String[] resultsReceived;
    HashMap<String, String> usernameWithFiles = new HashMap<String, String>();
    String selectedFileName;
    String FILEDIR;
    String USERNAME;
    Client clientFrame;
    PrivateKey privateKey;
    PublicKey publicKey;
    HashMap<String, PublicKey> knownKeys = new HashMap<String, PublicKey>();
    Encryption encryption;
    volatile Boolean isPausedDownload = false;
    volatile Boolean isPausedUpload = false;
    volatile Packet packet;

    /**
     * Creates new form Client
     */
    public Client(String username, ObjectOutputStream out, ObjectInputStream in, String fileDir) {
        USERNAME = username;
        this.out = out;
        this.in = in;
        clientFrame = this;
        FILEDIR = fileDir;

        initComponents();

        // GUI
        scaleImage(jLabel1, "Images/4user.png");
        scaleImage(jLabel8, "Images/4searchs.png");
        scaleImage(jLabel3, "Images/4downloads.png");
        scaleImage(jLabel4, "Images/4uploads.png");

        // set heading to username
        jLabel2.setText(username);

        // start listening for TCP communication
        try {
            listen();
        } catch (Exception e) {
            e.printStackTrace();
        }

        // generate RSA keypair
        KeyPairGenerator generator;
        try {
            generator = KeyPairGenerator.getInstance("RSA");
            generator.initialize(2048);
            KeyPair pair = generator.generateKeyPair();
            this.privateKey = pair.getPrivate();
            this.publicKey = pair.getPublic();

            // initialize encryption module
            encryption = new Encryption();

        } catch (Exception e) {
            e.printStackTrace();
        }

        // disconnect on window close
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent e) {
                // send disconnect packet
                try {
                    Packet packet = new Packet(CONNECT, username, true);
                    out.reset();
                    out.writeObject(packet);
                } catch (Exception err) {
                    err.printStackTrace();
                }

                // dispose window and exit program
                clientFrame.dispose();
                System.exit(0);

            }
        });

        resultsReceived = new String[0];
        jList1.setListData(resultsReceived);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel9 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jProgressBar3 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel9.setBackground(new java.awt.Color(33, 36, 43));

        jPanel1.setBackground(new java.awt.Color(51, 153, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(33, 36, 43));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Client_name");
        jLabel2.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
                                .addContainerGap()));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 67,
                                                Short.MAX_VALUE))
                                .addContainerGap()));

        jPanel2.setBackground(new java.awt.Color(33, 36, 43));
        jPanel2.setForeground(new java.awt.Color(33, 36, 43));

        jPanel6.setBackground(new java.awt.Color(33, 36, 43));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 255), 4));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 153, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Search");
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel6MouseEntered(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel6MouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                .addContainerGap()));
        jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                                .addGap(5, 5, 5)));

        jPanel4.setBackground(new java.awt.Color(33, 36, 43));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 255), 4));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 153, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Download");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel5MouseEntered(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel5MouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap()));
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                                .addContainerGap()));

        jScrollPane1.setBorder(null);

        jList1.setBackground(new java.awt.Color(33, 36, 43));
        jList1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 255), 4));
        jList1.setForeground(new java.awt.Color(51, 153, 255));
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jTextField5.setBackground(new java.awt.Color(51, 153, 255));
        jTextField5.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jTextField5.setForeground(new java.awt.Color(33, 36, 43));
        jTextField5.setText("Enter your username");
        jTextField5.setToolTipText("");
        jTextField5.setBorder(null);
        jTextField5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField5FocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField5FocusLost(evt);
            }
        });
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jTextField6.setBackground(new java.awt.Color(33, 36, 43));
        jTextField6.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jTextField6.setForeground(new java.awt.Color(51, 153, 255));
        jTextField6.setText("Search for files ...");
        jTextField6.setToolTipText("");
        jTextField6.setBorder(null);
        jTextField6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField6FocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField6FocusLost(evt);
            }
        });
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1)
                                        .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout
                                                .createSequentialGroup()
                                                .addGap(5, 5, 5)
                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 47,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 486,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addContainerGap())
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(245, 245, 245)
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 240,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(246, Short.MAX_VALUE))));
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextField6, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(120, 120, 120)
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 38,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(152, Short.MAX_VALUE))));

        jPanel3.setBackground(new java.awt.Color(33, 36, 43));

        jTextField2.setBackground(new java.awt.Color(33, 36, 43));
        jTextField2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(51, 153, 255));
        jTextField2.setText("Sending progress:");
        jTextField2.setToolTipText("");
        jTextField2.setBorder(null);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField4.setBackground(new java.awt.Color(33, 36, 43));
        jTextField4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(51, 153, 255));
        jTextField4.setText("Download progress:");
        jTextField4.setToolTipText("");
        jTextField4.setBorder(null);

        jPanel7.setBackground(new java.awt.Color(33, 36, 43));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 255), 4));

        jLabel7.setBackground(new java.awt.Color(33, 36, 43));
        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 153, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Pause");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel7MouseEntered(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel7MouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE));
        jPanel7Layout.setVerticalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE));

        jPanel10.setBackground(new java.awt.Color(33, 36, 43));
        jPanel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 255), 4));

        jLabel10.setBackground(new java.awt.Color(33, 36, 43));
        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 153, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Pause");
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel10MouseEntered(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel10MouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
                jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE));
        jPanel10Layout.setVerticalGroup(
                jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        jProgressBar1.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jProgressBar1.setForeground(new java.awt.Color(210, 175, 255));
        jProgressBar1.setBorder(null);
        jProgressBar1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jProgressBar1.setStringPainted(true);

        jProgressBar3.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jProgressBar3.setForeground(new java.awt.Color(210, 175, 255));
        jProgressBar3.setBorder(null);
        jProgressBar3.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jProgressBar3.setStringPainted(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addContainerGap(30, Short.MAX_VALUE)
                                                .addGroup(jPanel3Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                                .addComponent(jTextField4,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel3,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 30,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                                .addComponent(jProgressBar1,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 568,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(jPanel7,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(0, 30, Short.MAX_VALUE)
                                                .addGroup(jPanel3Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                                .addComponent(jTextField2,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel4,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 30,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                                .addComponent(jProgressBar3,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 568,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(jPanel10,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addContainerGap(24, Short.MAX_VALUE)));
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(22, 22, 22)
                                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 45,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(6, 6, 6))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                                                jPanel3Layout.createSequentialGroup()
                                                        .addContainerGap()
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(
                                                                javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGroup(jPanel3Layout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 39,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jProgressBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 41,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE)))));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
                jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel9Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        jPanel9Layout.setVerticalGroup(
                jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(38, 38, 38)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel10MouseClicked

        // change text
        if (jLabel10.getText().equals("Pause")) {
            jLabel10.setText("Resume");
        } else {
            jLabel10.setText("Pause");
        }

        // pause upload
        isPausedUpload = !isPausedUpload;

    }// GEN-LAST:event_jLabel10MouseClicked

    private void jLabel10MouseEntered(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel10MouseEntered
        jPanel10.setBackground(new Color(51, 153, 255));
        jLabel10.setForeground(new Color(33, 36, 43));
    }// GEN-LAST:event_jLabel10MouseEntered

    private void jLabel10MouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel10MouseExited
        jPanel10.setBackground(new Color(33, 36, 43));
        jLabel10.setForeground(new Color(51, 153, 255));
    }// GEN-LAST:event_jLabel10MouseExited

    private void jTextField6FocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextField6FocusGained
        if (jTextField6.getText().equals("Search for files ...")) {
            jTextField6.setText("");
        }

    }// GEN-LAST:event_jTextField6FocusGained

    private void jTextField6FocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextField6FocusLost
        if (jTextField6.getText().equals("")) {
            jTextField6.setText("Search for files ...");
        }

    }// GEN-LAST:event_jTextField6FocusLost

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jList1MouseClicked
        selectedFileName = (String) jList1.getModel().getElementAt(jList1.locationToIndex(evt.getPoint()));
    }// GEN-LAST:event_jList1MouseClicked

    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextField1FocusGained
    }// GEN-LAST:event_jTextField1FocusGained

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextField1FocusLost
    }// GEN-LAST:event_jTextField1FocusLost

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jTextField1ActionPerformed
    }// GEN-LAST:event_jTextField1ActionPerformed

    // request file to download
    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel5MouseClicked

        // request file to download
        System.out.println(
                "I WANT TO DOWNLOAD FILE " + selectedFileName + " from " + usernameWithFiles.get(selectedFileName));

        try {

            // encryptFileName
            byte[] encrypted = encryption.encrypt(selectedFileName);

            byte[] encryptedAES = encryption.getAES(knownKeys.get(usernameWithFiles.get(selectedFileName)));

            // create and send packet
            Packet packet = new Packet(KEY, USERNAME, usernameWithFiles.get(selectedFileName), encrypted, publicKey,
                    encryptedAES,
                    true,
                    false);

            out.writeObject(packet);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }// GEN-LAST:event_jLabel5MouseClicked

    private void jLabel5MouseEntered(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel5MouseEntered
        jPanel4.setBackground(new Color(51, 153, 255));
        jLabel5.setForeground(new Color(33, 36, 43));
    }// GEN-LAST:event_jLabel5MouseEntered

    private void jLabel5MouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel5MouseExited
        jPanel4.setBackground(new Color(33, 36, 43));
        jLabel5.setForeground(new Color(51, 153, 255));
    }// GEN-LAST:event_jLabel5MouseExited

    // search for a file
    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel6MouseClicked
        // clear search results
        resultsReceived = new String[0];
        usernameWithFiles = new HashMap<String, String>();
        jList1.setListData(resultsReceived);

        Packet packet = new Packet(SEARCH, USERNAME, jTextField6.getText());
        try {
            out.writeObject(packet);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }// GEN-LAST:event_jLabel6MouseClicked

    private void jLabel6MouseEntered(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel6MouseEntered
        jPanel6.setBackground(new Color(51, 153, 255));
        jLabel6.setForeground(new Color(33, 36, 43));

    }// GEN-LAST:event_jLabel6MouseEntered

    private void jLabel6MouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel6MouseExited
        jLabel6.setForeground(new Color(51, 153, 255));
        jPanel6.setBackground(new Color(33, 36, 43));

    }// GEN-LAST:event_jLabel6MouseExited

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jTextField2ActionPerformed
    }// GEN-LAST:event_jTextField2ActionPerformed

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel7MouseClicked
        // change text
        if (jLabel7.getText().equals("Pause")) {
            jLabel7.setText("Resume");
        } else {
            jLabel7.setText("Pause");
        }

        // pause download
        isPausedDownload = !isPausedDownload;
    }// GEN-LAST:event_jLabel7MouseClicked

    private void jLabel7MouseEntered(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel7MouseEntered
        jPanel7.setBackground(new Color(51, 153, 255));
        jLabel7.setForeground(new Color(33, 36, 43));
    }// GEN-LAST:event_jLabel7MouseEntered

    private void jLabel7MouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel7MouseExited
        jLabel7.setForeground(new Color(51, 153, 255));
        jPanel7.setBackground(new Color(33, 36, 43));
    }// GEN-LAST:event_jLabel7MouseExited

    private void jTextField5FocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextField5FocusGained
    }// GEN-LAST:event_jTextField5FocusGained

    private void jTextField5FocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextField5FocusLost
    }// GEN-LAST:event_jTextField5FocusLost

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jTextField5ActionPerformed
    }// GEN-LAST:event_jTextField5ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jTextField6ActionPerformed
    }// GEN-LAST:event_jTextField6ActionPerformed

    // =============USER FUNCTIONS================

    /**
     * Scales an image to fit within a JLabel.
     *
     * @param j     The JLabel to which the scaled image will be set.
     * @param image The path of the image file.
     */
    public void scaleImage(JLabel j, String image) {
        ImageIcon myImage = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource(image)));

        Image img1 = myImage.getImage();
        Image img2 = img1.getScaledInstance(j.getWidth() - 10, j.getHeight() - 10, Image.SCALE_SMOOTH);
        ImageIcon i = new ImageIcon(img2);
        j.setIcon(i);
    }

    /**
     * Listens for packets from the server.
     *
     * @throws Exception if an error occurs while listening for packets.
     */
    public void listen() throws Exception {

        // create new thread to listen to incoming connections
        new Thread(() -> {
            while (true) {

                try {
                    packet = (Packet) in.readObject();

                    switch (packet.type) {

                        // return all search matches to server
                        case SEARCH:

                            // get results
                            String searchString = packet.searchString;
                            String[] results = fuzzySearch(searchString);

                            // send back results with public key
                            packet = new Packet(RESULTS, packet.username, USERNAME, results, publicKey);
                            out.reset();
                            out.writeObject(packet);

                            break;

                        // receive all file results
                        case RESULTS:

                            // save public key from this user
                            knownKeys.put(packet.fileOwner, packet.publicKey);

                            // merge new results with previous results
                            String[] newResults = new String[resultsReceived.length + packet.files.length];

                            for (int i = 0; i < resultsReceived.length; i++) {
                                newResults[i] = resultsReceived[i];
                            }
                            for (int i = resultsReceived.length; i < resultsReceived.length
                                    + packet.files.length; i++) {

                                // add to results array
                                newResults[i] = packet.files[i - resultsReceived.length];

                                // add to global map to see file owners
                                usernameWithFiles.put(packet.files[i - resultsReceived.length], packet.fileOwner);
                            }

                            resultsReceived = newResults;
                            jList1.setListData(resultsReceived);

                            break;

                        // receive a key, requesting file, accept or reject
                        case KEY:

                            // request for file was denied
                            if (!packet.isRequest && !packet.confirmed) {
                                JOptionPane.showMessageDialog(clientFrame,
                                        "Your request for the file was denied by host",
                                        "Error",
                                        JOptionPane.ERROR_MESSAGE);
                                break;
                            }

                            // add public key to list
                            knownKeys.put(packet.username, packet.publicKey);

                            String decryptedFileName = encryption.decrypt(packet.encryptedName, packet.encryptedAESKey,
                                    privateKey);

                            System.out.println("RECEIVED A REQUEST FROM" + packet.username + " TO DOWNLOAD FILE: "
                                    + decryptedFileName);

                            // accept or reject
                            if (inDir(decryptedFileName)) {

                                boolean userOption;

                                // add popup in GUI to give user option to accept or reject
                                int reply = JOptionPane.showConfirmDialog(clientFrame,
                                        "Accept download request from " + packet.username + " for " + decryptedFileName
                                                + " ?",
                                        "Download request",
                                        JOptionPane.YES_NO_OPTION);
                                if (reply == JOptionPane.YES_OPTION) {
                                    userOption = true;
                                } else {
                                    userOption = false;
                                }

                                if (userOption) {
                                    packet = new Packet(KEY, packet.username, packet.requestee, packet.encryptedName,
                                            null, packet.encryptedAESKey,
                                            false, true);
                                } else {
                                    packet = new Packet(KEY, packet.username, packet.requestee, null, null, null, false,
                                            false);
                                }

                                out.writeObject(packet);

                            } else {
                                // auto reject if key not encrypted properly
                                packet = new Packet(KEY, packet.username, packet.requestee, null, null, null, false,
                                        false);
                                out.writeObject(packet);
                            }

                            break;

                        // initiate p2p connection and receive or send file
                        case CLIENT:

                            System.out.println("---- PORT: " + packet.port + " ----");

                            // new thread to enable double connection streams
                            new Thread(() -> {
                                try {

                                    if (packet.isHost) {
                                        ServerSocket ss = new ServerSocket(packet.port);

                                        Socket p2pSocket = ss.accept();

                                        ObjectOutputStream p2pOut = new ObjectOutputStream(p2pSocket.getOutputStream());
                                        ObjectInputStream p2pIn = new ObjectInputStream(p2pSocket.getInputStream());

                                        String filename = encryption.decrypt(packet.encryptedName,
                                                packet.encryptedAESKey,
                                                privateKey);

                                        FileInputStream fileInStream = new FileInputStream(
                                                new File(FILEDIR + "/" + filename));
                                        byte[] bytesToSend = fileInStream.readAllBytes();

                                        // send file size and file name
                                        p2pOut.writeObject((Integer) bytesToSend.length);
                                        p2pOut.writeObject(filename);

                                        int segmentSize = bytesToSend.length / 10;

                                        int progress = 0;

                                        // send 10 packets
                                        for (int i = 0; i < 10; i++) {

                                            while (isPausedUpload)
                                                ;

                                            // wait in each iteration for slower progress bar
                                            Thread.sleep(500);

                                            byte[] segment = Arrays.copyOfRange(bytesToSend, i * segmentSize,
                                                    (i * segmentSize) + segmentSize);
                                            p2pOut.writeObject(segment);

                                            progress += 10;
                                            System.out.println("PROGRESS = " + progress);
                                            jProgressBar3.setValue(progress);

                                        }

                                        // send the remainder
                                        if (bytesToSend.length % 10 != 0) {
                                            byte[] segment = Arrays.copyOfRange(bytesToSend,
                                                    segmentSize * 10, bytesToSend.length);
                                            p2pOut.writeObject(segment);
                                        }

                                        // reset progressbar
                                        Thread.sleep(2000);
                                        jProgressBar3.setValue(0);

                                        // close sockets and streams
                                        fileInStream.close();
                                        p2pOut.close();
                                        p2pSocket.close();
                                        ss.close();
                                    } else {

                                        // wait for host to make server
                                        Thread.sleep(1000);
                                        Socket p2pSocket = new Socket(packet.ip.substring(1, packet.ip.length()),
                                                packet.port);

                                        ObjectOutputStream p2pOut = new ObjectOutputStream(p2pSocket.getOutputStream());
                                        ObjectInputStream p2pIn = new ObjectInputStream(p2pSocket.getInputStream());

                                        System.out.println("SUCCESSFULLY CONNECTED TO HOSST");

                                        // receive file size and name
                                        Integer fileByteSize = (Integer) p2pIn.readObject();
                                        String fileName = (String) p2pIn.readObject();
                                        byte[] fileBytes = new byte[fileByteSize];

                                        System.out.println("Received the file size from host = " + fileByteSize);

                                        int segmentSize = fileByteSize / 10;

                                        int progress = 0;

                                        // receive 10 packets
                                        for (int i = 0; i < 10; i++) {

                                            while (isPausedDownload)
                                                ;

                                            byte[] segment = (byte[]) p2pIn.readObject();

                                            // append to master array
                                            System.arraycopy(segment, 0, fileBytes, i * segmentSize, segmentSize);

                                            // update progress
                                            progress += 10;
                                            System.out.println("PROGRESS = " + progress);
                                            jProgressBar1.setValue(progress);

                                        }

                                        // receive remainder
                                        if (fileByteSize % 10 != 0) {
                                            byte[] segment = (byte[]) p2pIn.readObject();

                                            // append to master array
                                            System.arraycopy(segment, 0, fileBytes, 10 * segmentSize,
                                                    fileByteSize % 10);

                                        }

                                        // convert from bytes to output file
                                        FileOutputStream outputStream = new FileOutputStream("output/" + fileName);
                                        outputStream.write(fileBytes);

                                        System.out.println("successfully wrote file");

                                        // reset progressbar
                                        Thread.sleep(2000);
                                        jProgressBar1.setValue(0);

                                        // close sockets and streams
                                        outputStream.close();
                                        p2pIn.close();
                                        p2pSocket.close();
                                    }

                                } catch (Exception e) {
                                    // e.printStackTrace();
                                }
                            }).start();

                            break;

                        default:
                            System.out.println("[client] Invalid packet type received from server");
                    }

                } catch (Exception e) {
                    // e.printStackTrace();
                }

            }

        }).start();

    }

    /**
     * Performs a fuzzy search on file names based on the provided query.
     *
     * @param query The search query.
     * @return An array of file names matching the query.
     */
    public String[] fuzzySearch(String query) {

        File[] files = new File(FILEDIR).listFiles();
        String[] fileNames = new String[files.length];

        // get all files in directory
        for (int i = 0; i < files.length; i++) {
            fileNames[i] = files[i].getName();
        }

        // do fuzzy search on all filenames
        fileNames = FuzzySearch.Fuzzy(fileNames, query);

        return fileNames;
    }

    /**
     * Checks if the given file name exists in the directory.
     *
     * @param fileName The name of the file to check.
     * @return True if the file exists in the directory, false otherwise.
     */
    public boolean inDir(String fileName) {

        boolean exists = false;

        // get all files in directory
        File[] files = new File(FILEDIR).listFiles();

        // check if file exists
        for (int i = 0; i < files.length; i++) {
            if (files[i].getName().equals(fileName)) {
                exists = true;
                break;
            }
        }

        return exists;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        // /* Create and display the form */
        // java.awt.EventQueue.invokeLater(new Runnable() {
        // public void run() {
        // new Client().setVisible(true);
        // }
        // });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    public javax.swing.JProgressBar jProgressBar1;
    public javax.swing.JProgressBar jProgressBar3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables
}
